require"Global"
-- import "UnityEngine"

local class = class()

function class:ChangeScene( )
	ResManager.Instance:LoadScene("ScrollUI",nil)
end

function class:Start( )
	self.panel = self.transform:GetComponent(UIPanel)
	self.container = self.container or self.transform:FindChild("container")
	self.cpanel = self.container.transform:GetComponent(UIPanel)
	self.boxCollider = self.container.transform:GetComponent(BoxCollider)

	-- frenquency for short
	-- 可视区域大小
	self.visibleRect = self.panel.baseClipRegion
	-- container偏移量
	self.offset = {x=0,y=0}
	-- container底部偏移量
	self.bottomOffset = Vector2(0,0)
	-- cell 个数
	self.cellNum = 0
	-- cells 对象池 所有对象
	self.cells = {}
	-- 视区内的cell
	self.visibleCells = {}
	-- 回收池
	self.exPools = {}
	-- cell宽高
	self.cellWidth = 100
	self.cellHeigth= 50

	self:initTable(20,Vector2(280,50))
	self:fillTable()
end

-- 设置初始化参数
function class:initTable( cellNum,size)
	self:SetTableCellSize(size)
	self:SetTableCellNum(cellNum)
	self:autoSetting()
end

-- 生成cell gameObject
function class:createCell( )
	local frame = FindChildInTransform("Cell", self.transform).gameObject
	local go  = CreateUIGo(frame)
	NGUITools.SetActive(go, true)
	local cell = GetLuaTable(go)
	return cell
end

-- 创建前先查找
function class:findCellInExPool( )
	local cell = self.exPools[#self.exPools]
	if not cell then
		cell = self:createCell()
		self.cells[#self.cells+1] = cell
	else
		table.remove(self.exPools,#self.exPools)
	end
	NGUITools.SetActive(cell.gameObject, true)
	return cell
end

function class:pushInExPool(cell)
	self.exPools[#self.exPools] = cell
	-- NGUITools.SetActive(cell.gameObject, false)
end

--[[
填充表格 拿到当前应该显示的列表索引 比如 0~9 依次填充对象，如果没有则创建
--]]
function class:fillTable(refresh)
	local topIndex,bottomIndex = self:getIndexOfOffset()
	if topIndex > self.cellNum or bottomIndex < 0 then return end
	self.visibleCells = {}
	for i=#self.cells,1,-1 do
		local cell = self.cells[i]
		if cell.index > topIndex or cell.index < (bottomIndex) then
			self:pushInExPool(cell)
			-- NGUITools.SetActive(cell.gameObject, false)
			self.visibleCells["" .. cell.index] = nil
		else
			self.visibleCells["" .. cell.index] = cell
			-- print("remove cell " .. cell.index)
		end
	end
	for i=bottomIndex,topIndex do
		self:fillCell(i,refresh)
	end
end

function class:fillCell( index,refresh )
	if self.visibleCells["" .. index] and not refresh then return end
	local cell = refresh and self.visibleCells["" .. index] or self:findCellInExPool()
	cell.index = index
	self.visibleCells["" .. index] = cell
	cell.transform.parent = self.container.transform
	local cellPosY = (index-self.cellNum*0.5+0.5)*self.cellHeigth
	cell.transform.localPosition = Vector3(0,cellPosY,0)
	cell.transform.localScale = Vector3.one
	-- cell.transform.localRotation = Vector3(0,0,0)
end

function class:insertCell( index )
	self.cellNum = self.cellNum+1
	self.newCellIndex = index
	local num,width,height = self.cellNum,self.cellWidth,self.cellHeigth
	-- self:clear()
	self:initTable(num,Vector2(width,height))
	self:fillTable(true--[[是否强制刷新]])
end

function class:deleteCell( index )
	self.cellNum = self.cellNum-1
	self.newCellIndex = nil
	local num,width,height = self.cellNum,self.cellWidth,self.cellHeigth
	-- self:clear()
	self:initTable(num,Vector2(width,height))
	self:fillTable(true)
end

function class:forceReflash( )
	
end

function class:SetTableDelegate( eventType,func )
	-- body
end

function class:SetTableOffset( offset )
	self.panel.transform.localPosition = Vector3(0,offset,0)
	self.panel.clipOffset = Vector3(0,-offset,0)
end

function class:autoSetting( )
	self:autoResizeContainer()
end

function class:autoResizeContainer( )
	local height = math.max(self.visibleRect.w,self.cellHeigth*self.cellNum)
	self:SetTableContainerSize(Vector2(self.cellWidth,height))
end

-- 设置container大小，需同时设置boxcollider
function class:SetTableContainerSize( size )
	self.cpanel.baseClipRegion = Vector4(0,0,size.x,size.y)
	self.boxCollider.size = Vector2(size.x,size.y)
end

-- 设置table cell个数
function class:SetTableCellNum(cellNum)
	self.cellNum = cellNum
end

-- 单个cell宽高
function class:SetTableCellSize( size )
	self.cellWidth = size.x
	self.cellHeigth = size.y
end

-- 设置初始为最高位置
function class:SetTopWhenInitDone( )
	self:SetTableOffset(-self:_getBottomOffsetOfCenter())
	-- self.container.transform.localPosition = Vector3(0,-self:_getBottomOffsetOfCenter(),0)
end

-- 设置初始为最低位置
function class:SetBottomWhenInitDone( )
	self:SetTableOffset(self:_getBottomOffsetOfCenter())
	-- self.container.transform.localPosition = Vector3(0,self:_getBottomOffsetOfCenter(),0)
end

-- 获得底部相对中心点的偏移量 NGUI是以gameObjcet中心为锚点特此转换为笛卡尔坐标
function class:_getBottomOffsetOfCenter( )
	local offset = 0
	local visibleH = self.panel.baseClipRegion.w
	local containerH = self.cpanel.baseClipRegion.w
	self._correctOffsetY = math.max((containerH-visibleH)/2,0)
	return math.max((containerH-visibleH)/2,0)
end

-- 通过算scrollView的offset 来矫正container的底部偏移
function class:_getContainerBottomCorrectOffset( )
	if not self.panel then return end
	self.offset.y = self.panel.transform.localPosition.y-(self._correctOffsetY or self:_getBottomOffsetOfCenter())
end

-- 假定从上往下排
function class:getIndexOfOffset( )
	local topIndex,bottomIndex = 0,0
	local visiblePos1 = -self.offset.y 
	local visiblePos2 = -self.offset.y+self.panel.baseClipRegion.w
	topIndex = self:convertPosToIndex(visiblePos2)
	bottomIndex = self:convertPosToIndex(visiblePos1)
	-- self.topIndex,self.bottomIndex = topIndex,bottomIndex
	return topIndex,bottomIndex
end

-- 根据位置获得索引值
function class:convertPosToIndex( pos )
	local index = math.floor(pos/self.cellHeigth)
	return index
end

function class:Update( )
	self:_getContainerBottomCorrectOffset()
	self:fillTable()
end

-- 清除
function class:clear( )
	self.cellNum = 0
	self.cellWidth = 0
	self.cellHeigth = 0
	for i,v in ipairs(self.cells) do
		Object.Destroy(v.gameObject)
	end
	self.cells = {}
	self.exPools = {}
	self.visibleCells = {}
	self:autoSetting()
end

-- 重置刷新 不删除节点和重新创建
function class:reflash( )
	self:fillTable(true)
end

return class